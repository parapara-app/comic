name: Backend CI

on:
  pull_request:
    branches: [ develop ]  # develop으로 가는 PR만 검증
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

env:
  RUST_VERSION: 'stable'
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
          override: true


      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target
        uses: actions/cache@v3
        with:
          path: backend/target
          key: ${{ runner.os }}-cargo-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        working-directory: ./backend
        run: cargo fmt -- --check

      - name: Run clippy
        working-directory: ./backend
        run: cargo clippy -- -D warnings

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true


      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            backend/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          TEST_DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          cargo test --verbose

      # Cache cargo-tarpaulin binary
      - name: Cache cargo-tarpaulin
        uses: actions/cache@v3
        id: tarpaulin-cache
        with:
          path: ~/.cargo/bin/cargo-tarpaulin
          key: ${{ runner.os }}-cargo-tarpaulin-v0.32.8

      - name: Install cargo-tarpaulin
        if: steps.tarpaulin-cache.outputs.cache-hit != 'true'
        run: cargo install cargo-tarpaulin --version 0.32.8

      - name: Generate test coverage
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        run: |
          cargo tarpaulin --out Xml --output-dir coverage || true
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/coverage
          flags: backend
          fail_ci_if_error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true


      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            backend/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build application
        working-directory: ./backend
        run: cargo build --release --verbose

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend/target/release/
          retention-days: 7

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_VERSION }}
          override: true


      - name: Run cargo audit
        working-directory: ./backend
        run: |
          cargo install cargo-audit || true
          cargo audit || true
        continue-on-error: true

      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'backend'
          path: './backend'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental
        continue-on-error: true