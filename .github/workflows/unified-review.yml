name: Unified AI Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [develop]  # develop 브랜치로 가는 PR에서만 실행
    paths:
      - '**.ts'
      - '**.tsx'
      - '**.js'
      - '**.jsx'
      - '**.rs'
      - '**.py'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  unified-review:
    name: AI Unified Review (Code + Security + Performance)
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install dependencies
        working-directory: .github/scripts
        run: |
          npm ci || npm install

      - name: Run unified AI review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPOSITORY: ${{ github.repository }}
        run: |
          node .github/scripts/unified-review.js

      - name: Post review comment
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            let reviewContent = '';
            try {
              reviewContent = fs.readFileSync('unified_review.md', 'utf8');
            } catch (error) {
              reviewContent = '## 🤖 AI 통합 리뷰\n\n⚠️ 리뷰를 완료할 수 없습니다. 로그를 확인해주세요.';
            }

            // Check if review contains critical issues
            const hasCriticalIssues = reviewContent.includes('심각') ||
                                     reviewContent.includes('🚨') ||
                                     reviewContent.includes('반드시 수정');

            // Find existing bot comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🤖 AI 통합 리뷰')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: reviewContent
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: reviewContent
              });
            }

            // If critical issues, create a review requesting changes
            if (hasCriticalIssues) {
              try {
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  event: 'REQUEST_CHANGES',
                  body: '🚨 **심각한 이슈 발견**\n\nAI 리뷰에서 반드시 수정이 필요한 문제를 발견했습니다. 위의 리뷰 내용을 확인해주세요.'
                });
              } catch (err) {
                console.log('Could not request changes:', err.message);
              }
            }