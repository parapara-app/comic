name: OpenAI Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [develop]  # develop 브랜치로 가는 PR에서만 실행
    paths:
      - '**.ts'
      - '**.tsx'
      - '**.js'
      - '**.jsx'
      - '**.rs'
      - '**.toml'
      - '**.json'
      - '**.yml'
      - '**.yaml'
      - '**.md'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  code-review:
    name: AI Code Review
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install dependencies
        working-directory: .github/scripts
        run: |
          npm ci || npm install

      - name: Get changed files
        id: changed-files
        run: |
          echo "Fetching changed files..."
          git diff --name-only --diff-filter=ACMRT ${{ github.event.pull_request.base.sha }}...${{ github.event.pull_request.head.sha }} > changed_files.txt
          echo "files<<EOF" >> $GITHUB_OUTPUT
          cat changed_files.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Analyze code with OpenAI
        id: review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPOSITORY: ${{ github.repository }}
        run: |
          node .github/scripts/openai-review.js

      - name: Post review summary
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Read the review results if they exist
            let reviewComment = '## 🤖 AI Code Review\n\n';

            try {
              const reviewResults = fs.readFileSync('review_results.md', 'utf8');
              reviewComment += reviewResults;
            } catch (error) {
              reviewComment += '⚠️ Code review could not be completed. Please check the logs for details.';
            }

            // Check if we already posted a review
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🤖 AI Code Review')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: reviewComment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: reviewComment
              });
            }

  security-review:
    name: Security Pattern Check
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install dependencies
        working-directory: .github/scripts
        run: |
          npm ci || npm install

      - name: Security analysis with OpenAI
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPOSITORY: ${{ github.repository }}
        run: |
          node .github/scripts/security-review.js

      - name: Post security findings
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            try {
              const securityResults = fs.readFileSync('security_results.md', 'utf8');
              if (securityResults.includes('🔴') || securityResults.includes('Critical')) {
                // Create review requesting changes for critical issues
                await github.rest.pulls.createReview({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  event: 'REQUEST_CHANGES',
                  body: securityResults
                });
              } else {
                // Post as comment for non-critical findings
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: securityResults
                });
              }
            } catch (error) {
              console.log('No security issues found or analysis skipped');
            }

  performance-suggestions:
    name: Performance Analysis
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.draft == false &&
      (contains(github.event.pull_request.title, 'perf') ||
       contains(github.event.pull_request.title, 'optimize'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'

      - name: Install dependencies
        working-directory: .github/scripts
        run: |
          npm ci || npm install

      - name: Performance analysis
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPOSITORY: ${{ github.repository }}
        run: |
          node .github/scripts/performance-review.js

      - name: Post performance suggestions
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            try {
              const perfResults = fs.readFileSync('performance_results.md', 'utf8');
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: perfResults
              });
            } catch (error) {
              console.log('Performance analysis skipped or no suggestions');
            }